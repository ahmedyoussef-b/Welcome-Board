// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(VISITOR)
  img       String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin   Admin?
  teacher Teacher?
  student Student?
  parent  Parent?
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

model Admin {
  id      String   @id @default(cuid())
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name    String
  surname String
  phone   String?
  img     String?
  address String?
}

model Teacher {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  phone     String?
  address   String?
  img       String?
  bloodType String?
  birthday  DateTime?
  sex       UserSex?
  subjects  Subject[] @relation("SubjectToTeacher")
  classes   Class[]   @relation("ClassSupervisor")
  lessons   Lesson[]
}

model Student {
  id         String       @id @default(cuid())
  userId     String       @unique
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  surname    String
  phone      String?
  address    String?
  img        String?
  bloodType  String?
  birthday   DateTime?
  sex        UserSex?
  gradeId    Int?
  grade      Grade?       @relation(fields: [gradeId], references: [id])
  classId    Int?
  class      Class?       @relation(fields: [classId], references: [id])
  parentId   String?
  parent     Parent?      @relation(fields: [parentId], references: [id])
  results    Result[]
  attendances Attendance[]
}

model Parent {
  id      String    @id @default(cuid())
  userId  String    @unique
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name    String
  surname String
  phone   String?
  address String?
  img     String?
  students Student[]
}

model Grade {
  id      Int       @id @default(autoincrement())
  level   Int       @unique
  classes Class[]
  students Student[]
}

model Class {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  abbreviation String?
  capacity     Int
  gradeId      Int
  grade        Grade         @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  supervisorId String?
  supervisor   Teacher?      @relation("ClassSupervisor", fields: [supervisorId], references: [id], onDelete: SetNull)
  students     Student[]
  lessons      Lesson[]
  events       Event[]
  announcements Announcement[]
  lessonRequirements LessonRequirement[]
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  weeklyHours Int      @default(2)
  coefficient Int?     @default(1)
  teachers    Teacher[] @relation("SubjectToTeacher")
  lessons     Lesson[]
  requirements LessonRequirement[]
}

model Lesson {
  id          Int      @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime @db.Time()
  endTime     DateTime @db.Time()
  subjectId   Int
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classId     Int
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacherId   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classroomId Int?
  classroom   Classroom? @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Classroom {
    id           Int @id @default(autoincrement())
    name         String @unique
    abbreviation String?
    capacity     Int
    building     String?
    lessons      Lesson[]
}

model LessonRequirement {
    id        Int     @id @default(autoincrement())
    classId   Int
    subjectId Int
    hours     Int
    
    class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
    subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

    @@unique([classId, subjectId])
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Assignment {
  id      Int      @id @default(autoincrement())
  title   String
  startDate DateTime
  dueDate DateTime
  lessonId Int
  lesson  Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results Result[]
}

model Result {
  id           Int      @id @default(autoincrement())
  score        Float
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  examId       Int?
  exam         Exam?    @relation(fields: [examId], references: [id], onDelete: Cascade)
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime @db.Date
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([date, studentId, lessonId])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime @db.Date
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}
