// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  name          String?
  password      String?
  role          Role      @default(VISITOR)
  img           String?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  refreshTokens RefreshToken[]
  admin         Admin?
  teacher       Teacher?
  student       Student?
  parent        Parent?
  scheduleDraft ScheduleDraft?
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id          String   @id @default(cuid())
  hashedToken String   @unique
  userId      String
  revoked     Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Admin {
  id      String  @id @default(cuid())
  name    String
  surname String
  phone   String?
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id        String    @id @default(cuid())
  name      String
  surname   String
  img       String?
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone     String?
  address   String?
  bloodType String?
  birthday  DateTime?
  sex       UserSex?
  subjects  Subject[] @relation("TeacherSubjects")
  classes   Class[]   @relation("ClassSupervisor")
  lessons   Lesson[]
  teacherConstraints TeacherConstraint[]
}

model Parent {
  id       String    @id @default(cuid())
  name     String
  surname  String
  img      String?
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone    String?
  address  String
  students Student[]
}

model Student {
  id         String       @id @default(cuid())
  name       String
  surname    String
  img        String?
  userId     String       @unique
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone      String?
  address    String
  bloodType  String
  sex        UserSex
  birthday   DateTime
  parentId   String
  classId    Int?
  gradeId    Int?
  parent     Parent       @relation(fields: [parentId], references: [id], onDelete: Cascade)
  class      Class?       @relation(fields: [classId], references: [id], onDelete: SetNull)
  grade      Grade?       @relation(fields: [gradeId], references: [id])
  results    Result[]
  attendances Attendance[]
}

model Grade {
  id      Int       @id @default(autoincrement())
  level   Int       @unique
  classes Class[]
  students Student[]
}

model Class {
  id           Int       @id @default(autoincrement())
  name         String
  abbreviation String?
  capacity     Int
  gradeId      Int
  supervisorId String?
  grade        Grade     @relation(fields: [gradeId], references: [id])
  supervisor   Teacher?  @relation("ClassSupervisor", fields: [supervisorId], references: [id], onDelete: SetNull)
  students     Student[]
  lessons      Lesson[]
  events       Event[]
  announcements Announcement[]
  lessonRequirements LessonRequirement[]
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  weeklyHours Int?
  coefficient Int?
  teachers    Teacher[] @relation("TeacherSubjects")
  lessons     Lesson[]
  lessonRequirements LessonRequirement[]
  subjectRequirements SubjectRequirement[]
}

model LessonRequirement {
  id        Int     @id @default(autoincrement())
  classId   Int
  subjectId Int
  hours     Int
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  @@unique([classId, subjectId])
}

model Classroom {
    id        Int      @id @default(autoincrement())
    name      String
    abbreviation String?
    capacity  Int
    building  String?
    lessons   Lesson[]
    subjectRequirements SubjectRequirement[]
}


model SubjectRequirement {
  id              Int       @id @default(autoincrement())
  subjectId       Int       @unique
  requiredRoomId  Int?
  timePreference  String?   @default("ANY") // ANY, AM, PM
  subject         Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classroom       Classroom? @relation(fields: [requiredRoomId], references: [id], onDelete: SetNull)
}

model TeacherConstraint {
  id          String   @id @default(cuid())
  teacherId   String
  day         Day
  startTime   String
  endTime     String
  description String?
  teacher     Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Lesson {
  id           Int          @id @default(autoincrement())
  name         String
  day          Day
  startTime    DateTime
  endTime      DateTime
  subjectId    Int
  classId      Int
  teacherId    String
  classroomId  Int?
  subject      Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  class        Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher      Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classroom    Classroom?   @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  exams        Exam[]
  assignments  Assignment[]
  attendances  Attendance[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  studentId    String
  examId       Int?
  assignmentId Int?
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam         Exam?       @relation(fields: [examId], references: [id], onDelete: SetNull)
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: SetNull)
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  lessonId  Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model ScheduleDraft {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  schoolConfig         Json?
  classes              Json?
  subjects             Json?
  teachers             Json?
  classrooms           Json?
  grades               Json?
  lessonRequirements   Json?
  teacherConstraints   Json?
  subjectRequirements  Json?
  teacherAssignments   Json?
  schedule             Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}
