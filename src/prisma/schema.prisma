// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(VISITOR)
  active        Boolean   @default(true)
  img           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  admin         Admin?
  teacher       Teacher?
  student       Student?
  parent        Parent?

  sessions      Session[]
  refreshTokens RefreshToken[]
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  phone     String?
  address   String?
  img       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  phone     String?
  address   String?
  img       String?
  bloodType String?
  birthday  DateTime?
  sex       UserSex?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  subjects Subject[] @relation("TeacherSubjects")
  classes  Class[]   @relation("ClassSupervisor")
  lessons  Lesson[]
}

model Student {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  phone     String?
  address   String
  img       String?
  bloodType String
  birthday  DateTime
  sex       UserSex
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gradeId  Int
  grade    Grade  @relation(fields: [gradeId], references: [id])
  classId  Int?
  class    Class? @relation(fields: [classId], references: [id])
  parentId String?
  parent   Parent?  @relation(fields: [parentId], references: [id])

  attendances Attendance[]
  results     Result[]
}

model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  surname   String
  phone     String?
  address   String
  img       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]
}

model Grade {
  id      Int     @id @default(autoincrement())
  level   Int     @unique
  classes Class[]
  students Student[]
}

model Class {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  abbreviation       String?
  capacity           Int
  gradeId            Int
  grade              Grade               @relation(fields: [gradeId], references: [id])
  supervisorId       String?
  supervisor         Teacher?            @relation("ClassSupervisor", fields: [supervisorId], references: [id], onDelete: SetNull)
  students           Student[]
  lessons            Lesson[]
  events             Event[]
  announcements      Announcement[]
  lessonRequirements LessonRequirement[]
}

model Subject {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  weeklyHours        Int
  coefficient        Int?
  teachers           Teacher[]           @relation("TeacherSubjects")
  lessons            Lesson[]
  lessonRequirements LessonRequirement[]
}

model Classroom {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  abbreviation String?
  capacity     Int
  building     String?
  lessons      Lesson[]
}

model Lesson {
  id          Int      @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime @db.Time(6)
  endTime     DateTime @db.Time(6)
  subjectId   Int
  subject     Subject  @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  classroomId Int?
  classroom   Classroom? @relation(fields: [classroomId], references: [id], onDelete: SetNull)

  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model LessonRequirement {
  id        Int     @id @default(autoincrement())
  classId   Int
  subjectId Int
  hours     Int
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Float
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id], onDelete: Cascade)
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime @db.Date
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId, date])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime @db.Date
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  VISITOR
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
